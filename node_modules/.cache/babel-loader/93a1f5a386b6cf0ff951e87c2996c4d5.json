{"ast":null,"code":"var _jsxFileName = \"/Users/shadiaoutabachi/Desktop/sei-main/hikingApp/front-end/hikingapp/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport AuthPage from './AuthPage/AuthPage';\nimport MainContainer from './MainContainer/MainContainer';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.checkForUser = async () => {\n      const currentUser = await fetch('http://localhost:8080/current', {\n        credentials: 'include'\n      }); //const parsedResponse = await currentUser.json();\n\n      if (currentUser == !null) {\n        this.setState({\n          loggedIn: true,\n          currentUser: currentUser\n        });\n      }\n    };\n\n    this.handleLogin = async formData => {\n      console.log(formData);\n\n      try {\n        const loginResponse = await fetch('http://localhost:8080/login', {\n          method: 'POST',\n          body: JSON.stringify(formData),\n          credentials: 'include',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const parsedLoginResponse = await loginResponse.json();\n        console.log(parsedLoginResponse, 'LOGIN HANDLED');\n        this.setState({\n          loggedIn: true,\n          currentUser: parsedLoginResponse\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.handleRegister = async formData => {\n      console.log(formData);\n      const response = await fetch('http://localhost:8080/users', {\n        method: 'POST',\n        body: JSON.stringify(formData),\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const parsedResponse = await response.json();\n      console.log(parsedResponse, \"PARSED RESPONSE FROM REGISTER\");\n      this.setState({\n        loggedIn: true,\n        currentUser: parsedResponse\n      });\n      console.log(this.state, 'STATE AFTER REGISTRERING');\n    };\n\n    this.updateUser = async (id, user) => {\n      console.log('UPDATE CLICKED');\n      const response = await fetch(\"http://localhost:9000/users/\".concat(id), {\n        method: 'PUT',\n        body: JSON.stringify(user),\n        credentials: 'include',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log('MADE IT PAST RESPONSE');\n      const updatedUser = await response.json();\n      console.log(updatedUser);\n\n      if (response.status === 200) {\n        console.log('GOOD JOB!!!!!');\n        this.setState({\n          currentUser: updatedUser.data\n        });\n      }\n    };\n\n    this.deleteUser = async id => {\n      if (this.state.currentUser !== null) {\n        console.log(\"DELETING USER \".concat(this.state.currentUser._id));\n        const deletedUser = await fetch(\"http://localhost:9000/users/\".concat(this.state.currentUser._id), {\n          method: 'DELETE'\n        });\n\n        if (deletedUser.status === 200) {\n          this.setState({\n            loggedIn: false,\n            currentUser: null\n          });\n        }\n      }\n    };\n\n    this.state = {\n      loggedIn: false,\n      currentUser: null\n    };\n  }\n\n  componentDidMount() {//this.checkForUser();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.loggedIn ? React.createElement(MainContainer, {\n      loggedIn: this.state.loggedIn,\n      currentUser: this.state.currentUser,\n      updateUser: this.updateUser,\n      deleteUser: this.deleteUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }) : React.createElement(AuthPage, {\n      handleLogin: this.handleLogin,\n      handleRegister: this.handleRegister,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/shadiaoutabachi/Desktop/sei-main/hikingApp/front-end/hikingapp/src/App.js"],"names":["React","Component","AuthPage","MainContainer","App","constructor","checkForUser","currentUser","fetch","credentials","setState","loggedIn","handleLogin","formData","console","log","loginResponse","method","body","JSON","stringify","headers","parsedLoginResponse","json","err","handleRegister","response","parsedResponse","state","updateUser","id","user","updatedUser","status","data","deleteUser","_id","deletedUser","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AuthPage from './AuthPage/AuthPage'\nimport MainContainer from './MainContainer/MainContainer';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      loggedIn: false,\n      currentUser: null\n    }\n  }\n  componentDidMount(){\n    //this.checkForUser();\n  }\n  checkForUser = async () => {\n    const currentUser = await fetch('http://localhost:8080/current', {\n      credentials: 'include'\n    })\n    //const parsedResponse = await currentUser.json();\n    if(currentUser == !null){\n      this.setState({\n        loggedIn: true,\n        currentUser: currentUser\n      })\n    }\n  }\n  handleLogin = async (formData) => {\n    console.log(formData);\n    try{\n      const loginResponse = await fetch('http://localhost:8080/login', {\n        method: 'POST',\n        body: JSON.stringify(formData),\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      const parsedLoginResponse = await loginResponse.json();\n      console.log(parsedLoginResponse, 'LOGIN HANDLED');\n      this.setState({\n        loggedIn: true,\n        currentUser: parsedLoginResponse\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n  handleRegister = async (formData) => {\n    console.log(formData);\n    const response = await fetch('http://localhost:8080/users', {\n      method: 'POST',\n      body: JSON.stringify(formData),\n      credentials: 'include',\n      headers: {\n        'Content-Type':  'application/json'\n      }\n    })\n    const parsedResponse = await response.json();\n    console.log(parsedResponse, \"PARSED RESPONSE FROM REGISTER\");\n   \n      this.setState({\n        loggedIn: true,\n        currentUser: parsedResponse\n      })\n    console.log(this.state, 'STATE AFTER REGISTRERING')\n  }\n  updateUser = async (id, user) => {\n    console.log('UPDATE CLICKED')\n    const response = await fetch(`http://localhost:9000/users/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(user),\n        credentials: 'include',\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    console.log('MADE IT PAST RESPONSE')\n    const updatedUser = await response.json();\n    console.log(updatedUser);\n    if(response.status === 200){\n        console.log('GOOD JOB!!!!!')\n        this.setState({\n            currentUser: updatedUser.data\n        })\n    }\n\n  }\n  deleteUser = async(id) => {\n    if(this.state.currentUser !== null){\n      console.log(`DELETING USER ${this.state.currentUser._id}`)\n      const deletedUser = await fetch(`http://localhost:9000/users/${this.state.currentUser._id}`, {\n        method: 'DELETE'\n      })\n      if(deletedUser.status === 200){\n        this.setState({\n          loggedIn: false,\n          currentUser: null\n        })\n      }\n    }\n  } \n  render(){\n \n\n    return (\n      <div className=\"App\">\n       {this.state.loggedIn ?\n       <MainContainer loggedIn = {this.state.loggedIn} currentUser = {this.state.currentUser} updateUser = {this.updateUser} deleteUser = {this.deleteUser}/>\n       :\n       <AuthPage handleLogin = {this.handleLogin} handleRegister = {this.handleRegister}/>\n      }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}